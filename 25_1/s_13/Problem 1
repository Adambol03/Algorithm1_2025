import random

def generate_test_data(sizes=[5, 10, 20]):
    tests = []
    for size in sizes:
        arr = [random.randint(0, 100) for _ in range(size)]
        tests.append(arr)
    return tests

def check_sorting_algorithm(sort_func):
    print(f"\nTesting {sort_func.__name__}...")
    tests = generate_test_data()
    for arr in tests:
        arr_copy = arr.copy()
        sorted_arr = sort_func(arr_copy)
        if sorted_arr == sorted(arr):
            print(f"  ✅ Passed for input size {len(arr)}")
        else:
            print(f"  ❌ Failed for input size {len(arr)}. Got {sorted_arr}")

def bad_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

check_sorting_algorithm(bad_sort)

def quick_sort_random(arr):
    if len(arr) <= 1:
        return arr
    pivot = random.choice(arr)
    left = [x for x in arr if x < pivot]
    mid = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort_random(left) + mid + quick_sort_random(right)

check_sorting_algorithm(quick_sort_random)

def quick_sort_average(arr):
    if len(arr) <= 1:
        return arr
    first = arr[0]
    mid_val = arr[len(arr)//2]
    last = arr[-1]
    pivot = sorted([first, mid_val, last])[1]
    left = [x for x in arr if x < pivot]
    mid = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort_average(left) + mid + quick_sort_average(right)

check_sorting_algorithm(quick_sort_average)

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

check_sorting_algorithm(merge_sort)

def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and arr[l] > arr[largest]:
        largest = l
    if r < n and arr[r] > arr[largest]:
        largest = r
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)
    for i in range(n//2 - 1, -1, -1):
        heapify(arr, n, i)
    for i in range(n-1, 0, -1):
        arr[0], arr[i] = arr[i], arr[0]
        heapify(arr, i, 0)
    return arr

check_sorting_algorithm(heap_sort)
