#problem2
import pandas as pd

complexities = pd.DataFrame({
    "Algorithm": ["Bad Sort", "Quick Sort (avg pivot)", "Merge Sort", "Heap Sort"],
    "Best Time": ["O(n)", "O(n log n)", "O(n log n)", "O(n log n)"],
    "Average Time": ["O(n²)", "O(n log n)", "O(n log n)", "O(n log n)"],
    "Worst Time": ["O(n²)", "O(n²)", "O(n log n)", "O(n log n)"],
    "Space": ["O(1)", "O(log n)", "O(n)", "O(1)"]
})

print("\nComplexity Analysis Table:")
print(complexities.to_string(index=False))



#problem3
import random
import time
import matplotlib.pyplot as plt
import pandas as pd

def generate_test_data(size):
    return [random.randint(0, 100000) for _ in range(size)]

def bad_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

def quick_sort_average(arr):
    if len(arr) <= 1:
        return arr
    first = arr[0]
    mid_val = arr[len(arr)//2]
    last = arr[-1]
    pivot = sorted([first, mid_val, last])[1]
    left = [x for x in arr if x < pivot]
    mid = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort_average(left) + mid + quick_sort_average(right)

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and arr[l] > arr[largest]:
        largest = l
    if r < n and arr[r] > arr[largest]:
        largest = r
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)
    for i in range(n//2 - 1, -1, -1):
        heapify(arr, n, i)
    for i in range(n-1, 0, -1):
        arr[0], arr[i] = arr[i], arr[0]
        heapify(arr, i, 0)
    return arr

sizes = [100, 500, 1000, 5000]
algorithms = {
    "Bad Sort": bad_sort,
    "Quick Sort (avg pivot)": quick_sort_average,
    "Merge Sort": merge_sort,
    "Heap Sort": heap_sort
}

results = []
for size in sizes:
    data = generate_test_data(size)
    for name, func in algorithms.items():
        arr_copy = data.copy()
        start = time.time()
        func(arr_copy)
        end = time.time()
        results.append({"Algorithm": name, "Size": size, "Time (s)": end - start})

df = pd.DataFrame(results)
print(df)

pivot_df = df.pivot(index="Size", columns="Algorithm", values="Time (s)")
pivot_df.plot(kind="line", marker="o", figsize=(8,5))
plt.title("Sorting Algorithms Performance Comparison")
plt.ylabel("Time (seconds)")
plt.grid(True)
plt.show()
