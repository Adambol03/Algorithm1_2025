{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1YtB4ighRTBsbso0zaIM0nmgaA8g4ELGY","authorship_tag":"ABX9TyN2ros6KJYGBXtSkYDRbH+i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w8BiIPvfJF4z","executionInfo":{"status":"ok","timestamp":1760863981832,"user_tz":-300,"elapsed":7367,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"8f80af2d-2368-4e0b-87f9-777730020850"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Array size: 1000\n","Heap Sort   : 0.00253 seconds\n","Quick Sort  : 0.00163 seconds\n","Merge Sort  : 0.00188 seconds\n","Bubble Sort : 0.05505 seconds\n","\n","Array size: 5000\n","Heap Sort   : 0.01530 seconds\n","Quick Sort  : 0.00929 seconds\n","Merge Sort  : 0.01080 seconds\n","Bubble Sort : 1.36815 seconds\n","\n","Array size: 10000\n","Heap Sort   : 0.03837 seconds\n","Quick Sort  : 0.01975 seconds\n","Merge Sort  : 0.02409 seconds\n","Bubble Sort : 5.77588 seconds\n","\n","✅ Benchmark completed. 'report.md' file has been created.\n"]}],"source":["import random\n","import time\n","\n","\n","#  Heap Sort\n","\n","def heapify(arr, n, i):\n","    largest = i\n","    l = 2*i + 1\n","    r = 2*i + 2\n","    if l < n and arr[l] > arr[largest]:\n","        largest = l\n","    if r < n and arr[r] > arr[largest]:\n","        largest = r\n","    if largest != i:\n","        arr[i], arr[largest] = arr[largest], arr[i]\n","        heapify(arr, n, largest)\n","\n","def heap_sort(arr):\n","    n = len(arr)\n","    for i in range(n//2 - 1, -1, -1):\n","        heapify(arr, n, i)\n","    for i in range(n - 1, 0, -1):\n","        arr[0], arr[i] = arr[i], arr[0]\n","        heapify(arr, i, 0)\n","    return arr\n","\n","\n","\n","#  Quick Sort\n","\n","def quick_sort(arr):\n","    if len(arr) <= 1:\n","        return arr\n","    pivot = arr[len(arr)//2]\n","    left = [x for x in arr if x < pivot]\n","    middle = [x for x in arr if x == pivot]\n","    right = [x for x in arr if x > pivot]\n","    return quick_sort(left) + middle + quick_sort(right)\n","\n","\n","\n","#  Merge Sort\n","\n","def merge_sort(arr):\n","    if len(arr) > 1:\n","        mid = len(arr)//2\n","        L = arr[:mid]\n","        R = arr[mid:]\n","\n","        merge_sort(L)\n","        merge_sort(R)\n","\n","        i = j = k = 0\n","        while i < len(L) and j < len(R):\n","            if L[i] < R[j]:\n","                arr[k] = L[i]\n","                i += 1\n","            else:\n","                arr[k] = R[j]\n","                j += 1\n","            k += 1\n","\n","        while i < len(L):\n","            arr[k] = L[i]\n","            i += 1\n","            k += 1\n","\n","        while j < len(R):\n","            arr[k] = R[j]\n","            j += 1\n","            k += 1\n","    return arr\n","\n","\n","\n","#  Bubble Sort (O(n²))\n","\n","def bubble_sort(arr):\n","    n = len(arr)\n","    for i in range(n):\n","        for j in range(0, n - i - 1):\n","            if arr[j] > arr[j+1]:\n","                arr[j], arr[j+1] = arr[j+1], arr[j]\n","    return arr\n","\n","\n","# Benchmark\n","def benchmark(sort_func, arr):\n","    start = time.perf_counter()\n","    sort_func(arr.copy())\n","    end = time.perf_counter()\n","    return end - start\n","\n","\n","def main():\n","    sizes = [1000, 5000, 10000]\n","    algorithms = {\n","        \"Heap Sort\": heap_sort,\n","        \"Quick Sort\": quick_sort,\n","        \"Merge Sort\": merge_sort,\n","        \"Bubble Sort\": bubble_sort\n","    }\n","\n","    results = {}\n","\n","    for n in sizes:\n","        arr = [random.randint(0, 10000) for _ in range(n)]\n","        results[n] = {}\n","        print(f\"\\nArray size: {n}\")\n","        for name, func in algorithms.items():\n","            t = benchmark(func, arr)\n","            results[n][name] = t\n","            print(f\"{name:<12}: {t:.5f} seconds\")\n","\n","\n","    # Generate Report\n","    with open(\"report.md\", \"w\", encoding=\"utf-8\") as f:\n","        f.write(\"# Sorting Algorithms Benchmark Report\\n\\n\")\n","        f.write(\"## 1. Algorithms Implemented\\n\")\n","        f.write(\"- **Heap Sort** – O(n log n)\\n\")\n","        f.write(\"- **Quick Sort** – O(n log n) average\\n\")\n","        f.write(\"- **Merge Sort** – O(n log n)\\n\")\n","        f.write(\"- **Bubble Sort** – O(n²)\\n\\n\")\n","\n","        f.write(\"## 2. Benchmark Results\\n\\n\")\n","        f.write(\"| Array Size | Heap Sort (s) | Quick Sort (s) | Merge Sort (s) | Bubble Sort (s) |\\n\")\n","        f.write(\"|-------------|---------------|----------------|----------------|----------------|\\n\")\n","\n","        for n in sizes:\n","            f.write(f\"| {n:<11} | {results[n]['Heap Sort']:.4f} | {results[n]['Quick Sort']:.4f} | \"\n","                    f\"{results[n]['Merge Sort']:.4f} | {results[n]['Bubble Sort']:.4f} |\\n\")\n","\n","        f.write(\"\\n## 3. Analysis\\n\")\n","        f.write(\"- **Quick Sort** обычно самый быстрый на случайных данных.\\n\")\n","        f.write(\"- **Heap Sort** немного медленнее, но не требует дополнительной памяти.\\n\")\n","        f.write(\"- **Merge Sort** стабилен и предсказуем.\\n\")\n","        f.write(\"- **Bubble Sort** крайне неэффективен при больших массивах.\\n\\n\")\n","\n","        f.write(\"## 4. Complexity Overview\\n\\n\")\n","        f.write(\"| Algorithm | Complexity | Approx. Iterations | Notes |\\n\")\n","        f.write(\"|------------|-------------|--------------------|--------|\\n\")\n","        f.write(\"| Heap Sort | O(n log n) | ~n * log₂(n) | Efficient for all data |\\n\")\n","        f.write(\"| Quick Sort | O(n log n) avg | ~n * log₂(n) | May degrade to O(n²) |\\n\")\n","        f.write(\"| Merge Sort | O(n log n) | ~n * log₂(n) | Stable, uses extra memory |\\n\")\n","        f.write(\"| Bubble Sort | O(n²) | ~n²/2 | Simple but very slow |\\n\\n\")\n","\n","        f.write(\"## 5. Conclusion\\n\")\n","        f.write(\"The best algorithm for large random datasets is **Quick Sort**. \"\n","                \"For guaranteed stability, use **Merge Sort**. \"\n","                \"Heap Sort offers good performance without extra memory. \"\n","                \"Bubble Sort should only be used for small or educational cases.\\n\")\n","\n","    print(\"\\n✅ Benchmark completed. 'report.md' file has been created.\")\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"]},{"cell_type":"code","source":["!apt install git -y\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h1mOohjVudTb","executionInfo":{"status":"ok","timestamp":1760864897958,"user_tz":-300,"elapsed":4036,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"848d30fc-5ece-4379-d890-86a0b5277cbc"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","git is already the newest version (1:2.34.1-1ubuntu1.15).\n","0 upgraded, 0 newly installed, 0 to remove and 38 not upgraded.\n"]}]},{"cell_type":"code","source":["!git config --global user.name \"ChenHaaa\"\n"],"metadata":{"id":"jvT7tMYcujKB","executionInfo":{"status":"ok","timestamp":1760864921878,"user_tz":-300,"elapsed":104,"user":{"displayName":"Chen","userId":"08024069487640951724"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["!git config --global user.email \"balijiangmusahan@gmail.com\"\n"],"metadata":{"id":"y244oWeIunvd","executionInfo":{"status":"ok","timestamp":1760864935005,"user_tz":-300,"elapsed":120,"user":{"displayName":"Chen","userId":"08024069487640951724"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["!git config --list\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N6UTDxOIus6_","executionInfo":{"status":"ok","timestamp":1760864955073,"user_tz":-300,"elapsed":140,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"80042840-ce26-4f1d-d8ab-ee5c3c0159ce"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["filter.lfs.smudge=git-lfs smudge -- %f\n","filter.lfs.process=git-lfs filter-process\n","filter.lfs.required=true\n","filter.lfs.clean=git-lfs clean -- %f\n","user.name=ChenHaaa\n","user.email=balijiangmusahan@gmail.com\n"]}]},{"cell_type":"code","source":["!git clone https://github.com/ChenHaaa/Algorithm1_2025.git\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2_dF_8U-wBmT","executionInfo":{"status":"ok","timestamp":1760865318440,"user_tz":-300,"elapsed":2929,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"48370cb3-2a06-4b54-fbf5-52e7e35abcea"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'Algorithm1_2025'...\n","remote: Enumerating objects: 416, done.\u001b[K\n","remote: Counting objects: 100% (94/94), done.\u001b[K\n","remote: Compressing objects: 100% (60/60), done.\u001b[K\n","remote: Total 416 (delta 69), reused 42 (delta 34), pack-reused 322 (from 1)\u001b[K\n","Receiving objects: 100% (416/416), 29.85 MiB | 19.94 MiB/s, done.\n","Resolving deltas: 100% (177/177), done.\n"]}]},{"cell_type":"code","source":["!ls /content/Algorithm1_2025\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GVUGxeBtwPdn","executionInfo":{"status":"ok","timestamp":1760865356889,"user_tz":-300,"elapsed":133,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"195c5f48-b187-47cf-ff94-33e0213916a8"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["25_1  Books   Exercises  Solutions\n","25_2  Course  README.md  Syllabus_Algorithms_jair_wuilloud.pdf\n"]}]},{"cell_type":"code","source":["%cd /content/Algorithm1_2025\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YAWTkms8xCdJ","executionInfo":{"status":"ok","timestamp":1760865572712,"user_tz":-300,"elapsed":45,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"a9313ec4-411e-45b9-a382-077625e62fcc"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/Algorithm1_2025\n"]}]},{"cell_type":"code","source":["!pwd\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WDQ03Z0nxHAF","executionInfo":{"status":"ok","timestamp":1760865581664,"user_tz":-300,"elapsed":23,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"9f0217e7-b8e1-4f6d-c09a-3ea4cffe7669"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/Algorithm1_2025\n"]}]},{"cell_type":"code","source":["!git checkout 25_2_14\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZkGjis6ixJ_D","executionInfo":{"status":"ok","timestamp":1760865593579,"user_tz":-300,"elapsed":43,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"2603a377-213f-42cd-9c84-4322a6b048c6"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["error: pathspec '25_2_14' did not match any file(s) known to git\n"]}]},{"cell_type":"code","source":["%cd /content/Algorithm1_2025\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"--qPz2aRxP02","executionInfo":{"status":"ok","timestamp":1760865620230,"user_tz":-300,"elapsed":14,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"1aac1da1-175d-480e-d74f-d84280aae7d7"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/Algorithm1_2025\n"]}]},{"cell_type":"code","source":["!pwd\n","!git status\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HWmyh0L4xSZu","executionInfo":{"status":"ok","timestamp":1760865628538,"user_tz":-300,"elapsed":533,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"88b2d3b8-1771-4fe4-fbe2-df8b3b7ba248"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/Algorithm1_2025\n","On branch main\n","Your branch is up to date with 'origin/main'.\n","\n","nothing to commit, working tree clean\n"]}]},{"cell_type":"code","source":["!git fetch origin\n"],"metadata":{"id":"mj59aNSixZmL","executionInfo":{"status":"ok","timestamp":1760865663575,"user_tz":-300,"elapsed":309,"user":{"displayName":"Chen","userId":"08024069487640951724"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["!git branch -a\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PHC8kEAQxdQk","executionInfo":{"status":"ok","timestamp":1760865672485,"user_tz":-300,"elapsed":119,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"5411b8d4-68fd-44aa-ec9b-9b6e3f0c6083"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["* \u001b[32mmain\u001b[m\n","  \u001b[31mremotes/origin/HEAD\u001b[m -> origin/main\n","  \u001b[31mremotes/origin/main\u001b[m\n"]}]},{"cell_type":"code","source":["!git fetch origin +refs/heads/*:refs/remotes/origin/*\n"],"metadata":{"id":"pbV0Cn8VxkbD","executionInfo":{"status":"ok","timestamp":1760865704511,"user_tz":-300,"elapsed":315,"user":{"displayName":"Chen","userId":"08024069487640951724"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["!git branch -a\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9OmBnF84xmUO","executionInfo":{"status":"ok","timestamp":1760865711755,"user_tz":-300,"elapsed":117,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"928fadec-6308-42f0-976b-2f6cc4f88117"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["* \u001b[32mmain\u001b[m\n","  \u001b[31mremotes/origin/HEAD\u001b[m -> origin/main\n","  \u001b[31mremotes/origin/main\u001b[m\n"]}]},{"cell_type":"code","source":["!git remote -v\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ArVevUNmxtZw","executionInfo":{"status":"ok","timestamp":1760865741360,"user_tz":-300,"elapsed":123,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"987a2d9c-bb3f-49c3-eb30-7237401624e4"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["origin\thttps://github.com/ChenHaaa/Algorithm1_2025.git (fetch)\n","origin\thttps://github.com/ChenHaaa/Algorithm1_2025.git (push)\n"]}]},{"cell_type":"code","source":["https://github.com/gilgameshjw/Algorithm1_2025.git\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"0DO-DjkOxxTP","executionInfo":{"status":"error","timestamp":1760865754625,"user_tz":-300,"elapsed":60,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"8b2057dd-69c2-41d3-c9d8-546850be2f2a"},"execution_count":23,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (ipython-input-3076328874.py, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-3076328874.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    https://github.com/gilgameshjw/Algorithm1_2025.git\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":["!git remote add upstream https://github.com/gilgameshjw/Algorithm1_2025.git\n","!git fetch upstream\n","!git branch -a\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UCGvgMvSx38X","executionInfo":{"status":"ok","timestamp":1760865783558,"user_tz":-300,"elapsed":739,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"972e948e-2023-4f60-b183-786d731fac1b"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["remote: Enumerating objects: 283, done.\u001b[K\n","remote: Counting objects:   0% (1/176)\u001b[K\rremote: Counting objects:   1% (2/176)\u001b[K\rremote: Counting objects:   2% (4/176)\u001b[K\rremote: Counting objects:   3% (6/176)\u001b[K\rremote: Counting objects:   4% (8/176)\u001b[K\rremote: Counting objects:   5% (9/176)\u001b[K\rremote: Counting objects:   6% (11/176)\u001b[K\rremote: Counting objects:   7% (13/176)\u001b[K\rremote: Counting objects:   8% (15/176)\u001b[K\rremote: Counting objects:   9% (16/176)\u001b[K\rremote: Counting objects:  10% (18/176)\u001b[K\rremote: Counting objects:  11% (20/176)\u001b[K\rremote: Counting objects:  12% (22/176)\u001b[K\rremote: Counting objects:  13% (23/176)\u001b[K\rremote: Counting objects:  14% (25/176)\u001b[K\rremote: Counting objects:  15% (27/176)\u001b[K\rremote: Counting objects:  16% (29/176)\u001b[K\rremote: Counting objects:  17% (30/176)\u001b[K\rremote: Counting objects:  18% (32/176)\u001b[K\rremote: Counting objects:  19% (34/176)\u001b[K\rremote: Counting objects:  20% (36/176)\u001b[K\rremote: Counting objects:  21% (37/176)\u001b[K\rremote: Counting objects:  22% (39/176)\u001b[K\rremote: Counting objects:  23% (41/176)\u001b[K\rremote: Counting objects:  24% (43/176)\u001b[K\rremote: Counting objects:  25% (44/176)\u001b[K\rremote: Counting objects:  26% (46/176)\u001b[K\rremote: Counting objects:  27% (48/176)\u001b[K\rremote: Counting objects:  28% (50/176)\u001b[K\rremote: Counting objects:  29% (52/176)\u001b[K\rremote: Counting objects:  30% (53/176)\u001b[K\rremote: Counting objects:  31% (55/176)\u001b[K\rremote: Counting objects:  32% (57/176)\u001b[K\rremote: Counting objects:  33% (59/176)\u001b[K\rremote: Counting objects:  34% (60/176)\u001b[K\rremote: Counting objects:  35% (62/176)\u001b[K\rremote: Counting objects:  36% (64/176)\u001b[K\rremote: Counting objects:  37% (66/176)\u001b[K\rremote: Counting objects:  38% (67/176)\u001b[K\rremote: Counting objects:  39% (69/176)\u001b[K\rremote: Counting objects:  40% (71/176)\u001b[K\rremote: Counting objects:  41% (73/176)\u001b[K\rremote: Counting objects:  42% (74/176)\u001b[K\rremote: Counting objects:  43% (76/176)\u001b[K\rremote: Counting objects:  44% (78/176)\u001b[K\rremote: Counting objects:  45% (80/176)\u001b[K\rremote: Counting objects:  46% (81/176)\u001b[K\rremote: Counting objects:  47% (83/176)\u001b[K\rremote: Counting objects:  48% (85/176)\u001b[K\rremote: Counting objects:  49% (87/176)\u001b[K\rremote: Counting objects:  50% (88/176)\u001b[K\rremote: Counting objects:  51% (90/176)\u001b[K\rremote: Counting objects:  52% (92/176)\u001b[K\rremote: Counting objects:  53% (94/176)\u001b[K\rremote: Counting objects:  54% (96/176)\u001b[K\rremote: Counting objects:  55% (97/176)\u001b[K\rremote: Counting objects:  56% (99/176)\u001b[K\rremote: Counting objects:  57% (101/176)\u001b[K\rremote: Counting objects:  58% (103/176)\u001b[K\rremote: Counting objects:  59% (104/176)\u001b[K\rremote: Counting objects:  60% (106/176)\u001b[K\rremote: Counting objects:  61% (108/176)\u001b[K\rremote: Counting objects:  62% (110/176)\u001b[K\rremote: Counting objects:  63% (111/176)\u001b[K\rremote: Counting objects:  64% (113/176)\u001b[K\rremote: Counting objects:  65% (115/176)\u001b[K\rremote: Counting objects:  66% (117/176)\u001b[K\rremote: Counting objects:  67% (118/176)\u001b[K\rremote: Counting objects:  68% (120/176)\u001b[K\rremote: Counting objects:  69% (122/176)\u001b[K\rremote: Counting objects:  70% (124/176)\u001b[K\rremote: Counting objects:  71% (125/176)\u001b[K\rremote: Counting objects:  72% (127/176)\u001b[K\rremote: Counting objects:  73% (129/176)\u001b[K\rremote: Counting objects:  74% (131/176)\u001b[K\rremote: Counting objects:  75% (132/176)\u001b[K\rremote: Counting objects:  76% (134/176)\u001b[K\rremote: Counting objects:  77% (136/176)\u001b[K\rremote: Counting objects:  78% (138/176)\u001b[K\rremote: Counting objects:  79% (140/176)\u001b[K\rremote: Counting objects:  80% (141/176)\u001b[K\rremote: Counting objects:  81% (143/176)\u001b[K\rremote: Counting objects:  82% (145/176)\u001b[K\rremote: Counting objects:  83% (147/176)\u001b[K\rremote: Counting objects:  84% (148/176)\u001b[K\rremote: Counting objects:  85% (150/176)\u001b[K\rremote: Counting objects:  86% (152/176)\u001b[K\rremote: Counting objects:  87% (154/176)\u001b[K\rremote: Counting objects:  88% (155/176)\u001b[K\rremote: Counting objects:  89% (157/176)\u001b[K\rremote: Counting objects:  90% (159/176)\u001b[K\rremote: Counting objects:  91% (161/176)\u001b[K\rremote: Counting objects:  92% (162/176)\u001b[K\rremote: Counting objects:  93% (164/176)\u001b[K\rremote: Counting objects:  94% (166/176)\u001b[K\rremote: Counting objects:  95% (168/176)\u001b[K\rremote: Counting objects:  96% (169/176)\u001b[K\rremote: Counting objects:  97% (171/176)\u001b[K\rremote: Counting objects:  98% (173/176)\u001b[K\rremote: Counting objects:  99% (175/176)\u001b[K\rremote: Counting objects: 100% (176/176)\u001b[K\rremote: Counting objects: 100% (176/176), done.\u001b[K\n","remote: Compressing objects:   1% (1/89)\u001b[K\rremote: Compressing objects:   2% (2/89)\u001b[K\rremote: Compressing objects:   3% (3/89)\u001b[K\rremote: Compressing objects:   4% (4/89)\u001b[K\rremote: Compressing objects:   5% (5/89)\u001b[K\rremote: Compressing objects:   6% (6/89)\u001b[K\rremote: Compressing objects:   7% (7/89)\u001b[K\rremote: Compressing objects:   8% (8/89)\u001b[K\rremote: Compressing objects:  10% (9/89)\u001b[K\rremote: Compressing objects:  11% (10/89)\u001b[K\rremote: Compressing objects:  12% (11/89)\u001b[K\rremote: Compressing objects:  13% (12/89)\u001b[K\rremote: Compressing objects:  14% (13/89)\u001b[K\rremote: Compressing objects:  15% (14/89)\u001b[K\rremote: Compressing objects:  16% (15/89)\u001b[K\rremote: Compressing objects:  17% (16/89)\u001b[K\rremote: Compressing objects:  19% (17/89)\u001b[K\rremote: Compressing objects:  20% (18/89)\u001b[K\rremote: Compressing objects:  21% (19/89)\u001b[K\rremote: Compressing objects:  22% (20/89)\u001b[K\rremote: Compressing objects:  23% (21/89)\u001b[K\rremote: Compressing objects:  24% (22/89)\u001b[K\rremote: Compressing objects:  25% (23/89)\u001b[K\rremote: Compressing objects:  26% (24/89)\u001b[K\rremote: Compressing objects:  28% (25/89)\u001b[K\rremote: Compressing objects:  29% (26/89)\u001b[K\rremote: Compressing objects:  30% (27/89)\u001b[K\rremote: Compressing objects:  31% (28/89)\u001b[K\rremote: Compressing objects:  32% (29/89)\u001b[K\rremote: Compressing objects:  33% (30/89)\u001b[K\rremote: Compressing objects:  34% (31/89)\u001b[K\rremote: Compressing objects:  35% (32/89)\u001b[K\rremote: Compressing objects:  37% (33/89)\u001b[K\rremote: Compressing objects:  38% (34/89)\u001b[K\rremote: Compressing objects:  39% (35/89)\u001b[K\rremote: Compressing objects:  40% (36/89)\u001b[K\rremote: Compressing objects:  41% (37/89)\u001b[K\rremote: Compressing objects:  42% (38/89)\u001b[K\rremote: Compressing objects:  43% (39/89)\u001b[K\rremote: Compressing objects:  44% (40/89)\u001b[K\rremote: Compressing objects:  46% (41/89)\u001b[K\rremote: Compressing objects:  47% (42/89)\u001b[K\rremote: Compressing objects:  48% (43/89)\u001b[K\rremote: Compressing objects:  49% (44/89)\u001b[K\rremote: Compressing objects:  50% (45/89)\u001b[K\rremote: Compressing objects:  51% (46/89)\u001b[K\rremote: Compressing objects:  52% (47/89)\u001b[K\rremote: Compressing objects:  53% (48/89)\u001b[K\rremote: Compressing objects:  55% (49/89)\u001b[K\rremote: Compressing objects:  56% (50/89)\u001b[K\rremote: Compressing objects:  57% (51/89)\u001b[K\rremote: Compressing objects:  58% (52/89)\u001b[K\rremote: Compressing objects:  59% (53/89)\u001b[K\rremote: Compressing objects:  60% (54/89)\u001b[K\rremote: Compressing objects:  61% (55/89)\u001b[K\rremote: Compressing objects:  62% (56/89)\u001b[K\rremote: Compressing objects:  64% (57/89)\u001b[K\rremote: Compressing objects:  65% (58/89)\u001b[K\rremote: Compressing objects:  66% (59/89)\u001b[K\rremote: Compressing objects:  67% (60/89)\u001b[K\rremote: Compressing objects:  68% (61/89)\u001b[K\rremote: Compressing objects:  69% (62/89)\u001b[K\rremote: Compressing objects:  70% (63/89)\u001b[K\rremote: Compressing objects:  71% (64/89)\u001b[K\rremote: Compressing objects:  73% (65/89)\u001b[K\rremote: Compressing objects:  74% (66/89)\u001b[K\rremote: Compressing objects:  75% (67/89)\u001b[K\rremote: Compressing objects:  76% (68/89)\u001b[K\rremote: Compressing objects:  77% (69/89)\u001b[K\rremote: Compressing objects:  78% (70/89)\u001b[K\rremote: Compressing objects:  79% (71/89)\u001b[K\rremote: Compressing objects:  80% (72/89)\u001b[K\rremote: Compressing objects:  82% (73/89)\u001b[K\rremote: Compressing objects:  83% (74/89)\u001b[K\rremote: Compressing objects:  84% (75/89)\u001b[K\rremote: Compressing objects:  85% (76/89)\u001b[K\rremote: Compressing objects:  86% (77/89)\u001b[K\rremote: Compressing objects:  87% (78/89)\u001b[K\rremote: Compressing objects:  88% (79/89)\u001b[K\rremote: Compressing objects:  89% (80/89)\u001b[K\rremote: Compressing objects:  91% (81/89)\u001b[K\rremote: Compressing objects:  92% (82/89)\u001b[K\rremote: Compressing objects:  93% (83/89)\u001b[K\rremote: Compressing objects:  94% (84/89)\u001b[K\rremote: Compressing objects:  95% (85/89)\u001b[K\rremote: Compressing objects:  96% (86/89)\u001b[K\rremote: Compressing objects:  97% (87/89)\u001b[K\rremote: Compressing objects:  98% (88/89)\u001b[K\rremote: Compressing objects: 100% (89/89)\u001b[K\rremote: Compressing objects: 100% (89/89), done.\u001b[K\n","Receiving objects:   0% (1/148)\rReceiving objects:   1% (2/148)\rReceiving objects:   2% (3/148)\rReceiving objects:   3% (5/148)\rReceiving objects:   4% (6/148)\rReceiving objects:   5% (8/148)\rReceiving objects:   6% (9/148)\rReceiving objects:   7% (11/148)\rReceiving objects:   8% (12/148)\rReceiving objects:   9% (14/148)\rReceiving objects:  10% (15/148)\rReceiving objects:  11% (17/148)\rReceiving objects:  12% (18/148)\rReceiving objects:  13% (20/148)\rReceiving objects:  14% (21/148)\rReceiving objects:  15% (23/148)\rReceiving objects:  16% (24/148)\rReceiving objects:  17% (26/148)\rReceiving objects:  18% (27/148)\rReceiving objects:  19% (29/148)\rReceiving objects:  20% (30/148)\rReceiving objects:  21% (32/148)\rReceiving objects:  22% (33/148)\rReceiving objects:  23% (35/148)\rReceiving objects:  24% (36/148)\rReceiving objects:  25% (37/148)\rReceiving objects:  26% (39/148)\rReceiving objects:  27% (40/148)\rReceiving objects:  28% (42/148)\rReceiving objects:  29% (43/148)\rReceiving objects:  30% (45/148)\rReceiving objects:  31% (46/148)\rReceiving objects:  32% (48/148)\rReceiving objects:  33% (49/148)\rReceiving objects:  34% (51/148)\rReceiving objects:  35% (52/148)\rReceiving objects:  36% (54/148)\rReceiving objects:  37% (55/148)\rReceiving objects:  38% (57/148)\rReceiving objects:  39% (58/148)\rReceiving objects:  40% (60/148)\rReceiving objects:  41% (61/148)\rReceiving objects:  42% (63/148)\rReceiving objects:  43% (64/148)\rReceiving objects:  44% (66/148)\rReceiving objects:  45% (67/148)\rReceiving objects:  46% (69/148)\rReceiving objects:  47% (70/148)\rremote: Total 148 (delta 72), reused 129 (delta 56), pack-reused 0 (from 0)\u001b[K\n","Receiving objects:  48% (72/148)\rReceiving objects:  49% (73/148)\rReceiving objects:  50% (74/148)\rReceiving objects:  51% (76/148)\rReceiving objects:  52% (77/148)\rReceiving objects:  53% (79/148)\rReceiving objects:  54% (80/148)\rReceiving objects:  55% (82/148)\rReceiving objects:  56% (83/148)\rReceiving objects:  57% (85/148)\rReceiving objects:  58% (86/148)\rReceiving objects:  59% (88/148)\rReceiving objects:  60% (89/148)\rReceiving objects:  61% (91/148)\rReceiving objects:  62% (92/148)\rReceiving objects:  63% (94/148)\rReceiving objects:  64% (95/148)\rReceiving objects:  65% (97/148)\rReceiving objects:  66% (98/148)\rReceiving objects:  67% (100/148)\rReceiving objects:  68% (101/148)\rReceiving objects:  69% (103/148)\rReceiving objects:  70% (104/148)\rReceiving objects:  71% (106/148)\rReceiving objects:  72% (107/148)\rReceiving objects:  73% (109/148)\rReceiving objects:  74% (110/148)\rReceiving objects:  75% (111/148)\rReceiving objects:  76% (113/148)\rReceiving objects:  77% (114/148)\rReceiving objects:  78% (116/148)\rReceiving objects:  79% (117/148)\rReceiving objects:  80% (119/148)\rReceiving objects:  81% (120/148)\rReceiving objects:  82% (122/148)\rReceiving objects:  83% (123/148)\rReceiving objects:  84% (125/148)\rReceiving objects:  85% (126/148)\rReceiving objects:  86% (128/148)\rReceiving objects:  87% (129/148)\rReceiving objects:  88% (131/148)\rReceiving objects:  89% (132/148)\rReceiving objects:  90% (134/148)\rReceiving objects:  91% (135/148)\rReceiving objects:  92% (137/148)\rReceiving objects:  93% (138/148)\rReceiving objects:  94% (140/148)\rReceiving objects:  95% (141/148)\rReceiving objects:  96% (143/148)\rReceiving objects:  97% (144/148)\rReceiving objects:  98% (146/148)\rReceiving objects:  99% (147/148)\rReceiving objects: 100% (148/148)\rReceiving objects: 100% (148/148), 201.45 KiB | 3.47 MiB/s, done.\n","Resolving deltas:   0% (0/72)\rResolving deltas:   1% (1/72)\rResolving deltas:   2% (2/72)\rResolving deltas:   4% (3/72)\rResolving deltas:   5% (4/72)\rResolving deltas:   6% (5/72)\rResolving deltas:   8% (6/72)\rResolving deltas:   9% (7/72)\rResolving deltas:  11% (8/72)\rResolving deltas:  12% (9/72)\rResolving deltas:  13% (10/72)\rResolving deltas:  15% (11/72)\rResolving deltas:  16% (12/72)\rResolving deltas:  18% (13/72)\rResolving deltas:  19% (14/72)\rResolving deltas:  20% (15/72)\rResolving deltas:  22% (16/72)\rResolving deltas:  23% (17/72)\rResolving deltas:  25% (18/72)\rResolving deltas:  26% (19/72)\rResolving deltas:  27% (20/72)\rResolving deltas:  29% (21/72)\rResolving deltas:  30% (22/72)\rResolving deltas:  31% (23/72)\rResolving deltas:  33% (24/72)\rResolving deltas:  34% (25/72)\rResolving deltas:  36% (26/72)\rResolving deltas:  37% (27/72)\rResolving deltas:  38% (28/72)\rResolving deltas:  40% (29/72)\rResolving deltas:  41% (30/72)\rResolving deltas:  43% (31/72)\rResolving deltas:  44% (32/72)\rResolving deltas:  45% (33/72)\rResolving deltas:  47% (34/72)\rResolving deltas:  48% (35/72)\rResolving deltas:  50% (36/72)\rResolving deltas:  51% (37/72)\rResolving deltas:  52% (38/72)\rResolving deltas:  54% (39/72)\rResolving deltas:  55% (40/72)\rResolving deltas:  56% (41/72)\rResolving deltas:  58% (42/72)\rResolving deltas:  59% (43/72)\rResolving deltas:  61% (44/72)\rResolving deltas:  62% (45/72)\rResolving deltas:  63% (46/72)\rResolving deltas:  65% (47/72)\rResolving deltas:  66% (48/72)\rResolving deltas:  68% (49/72)\rResolving deltas:  69% (50/72)\rResolving deltas:  70% (51/72)\rResolving deltas:  72% (52/72)\rResolving deltas:  73% (53/72)\rResolving deltas:  75% (54/72)\rResolving deltas:  76% (55/72)\rResolving deltas:  77% (56/72)\rResolving deltas:  79% (57/72)\rResolving deltas:  80% (58/72)\rResolving deltas:  81% (59/72)\rResolving deltas:  83% (60/72)\rResolving deltas:  84% (61/72)\rResolving deltas:  86% (62/72)\rResolving deltas:  87% (63/72)\rResolving deltas:  88% (64/72)\rResolving deltas:  90% (65/72)\rResolving deltas:  91% (66/72)\rResolving deltas:  93% (67/72)\rResolving deltas:  94% (68/72)\rResolving deltas:  95% (69/72)\rResolving deltas:  97% (70/72)\rResolving deltas:  98% (71/72)\rResolving deltas: 100% (72/72)\rResolving deltas: 100% (72/72), completed with 15 local objects.\n","From https://github.com/gilgameshjw/Algorithm1_2025\n"," * [new branch]      25-1/12/ex_2_outputs -> upstream/25-1/12/ex_2_outputs\n"," * [new branch]      25_02-s_4            -> upstream/25_02-s_4\n"," * [new branch]      25_1_s_6             -> upstream/25_1_s_6\n"," * [new branch]      25_2-s_2             -> upstream/25_2-s_2\n"," * [new branch]      25_2_10              -> upstream/25_2_10\n"," * [new branch]      25_2_16              -> upstream/25_2_16\n"," * [new branch]      25_2_18              -> upstream/25_2_18\n"," * [new branch]      25_2_19              -> upstream/25_2_19\n"," * [new branch]      25_2_3               -> upstream/25_2_3\n"," * [new branch]      25_2_7               -> upstream/25_2_7\n"," * [new branch]      25_2_s_15            -> upstream/25_2_s_15\n"," * [new branch]      akan_zholdygali      -> upstream/akan_zholdygali\n"," * [new branch]      algo_1_sabitov_yasin -> upstream/algo_1_sabitov_yasin\n"," * [new branch]      erniyaz_ashuov       -> upstream/erniyaz_ashuov\n"," * [new branch]      exo_2_8              -> upstream/exo_2_8\n"," * [new branch]      eyesullu-exo2        -> upstream/eyesullu-exo2\n"," * [new branch]      eyesullu-exo_2       -> upstream/eyesullu-exo_2\n"," * [new branch]      main                 -> upstream/main\n"," * [new branch]      meirambek-solution   -> upstream/meirambek-solution\n"," * [new branch]      nursultan_11         -> upstream/nursultan_11\n"," * [new branch]      three_algorhithms_8  -> upstream/three_algorhithms_8\n"," * [new branch]      yelaman_seiitkhanuly -> upstream/yelaman_seiitkhanuly\n","* \u001b[32mmain\u001b[m\n","  \u001b[31mremotes/origin/HEAD\u001b[m -> origin/main\n","  \u001b[31mremotes/origin/main\u001b[m\n","  \u001b[31mremotes/upstream/25-1/12/ex_2_outputs\u001b[m\n","  \u001b[31mremotes/upstream/25_02-s_4\u001b[m\n","  \u001b[31mremotes/upstream/25_1_s_6\u001b[m\n","  \u001b[31mremotes/upstream/25_2-s_2\u001b[m\n","  \u001b[31mremotes/upstream/25_2_10\u001b[m\n","  \u001b[31mremotes/upstream/25_2_16\u001b[m\n","  \u001b[31mremotes/upstream/25_2_18\u001b[m\n","  \u001b[31mremotes/upstream/25_2_19\u001b[m\n","  \u001b[31mremotes/upstream/25_2_3\u001b[m\n","  \u001b[31mremotes/upstream/25_2_7\u001b[m\n","  \u001b[31mremotes/upstream/25_2_s_15\u001b[m\n","  \u001b[31mremotes/upstream/akan_zholdygali\u001b[m\n","  \u001b[31mremotes/upstream/algo_1_sabitov_yasin\u001b[m\n","  \u001b[31mremotes/upstream/erniyaz_ashuov\u001b[m\n","  \u001b[31mremotes/upstream/exo_2_8\u001b[m\n","  \u001b[31mremotes/upstream/eyesullu-exo2\u001b[m\n","  \u001b[31mremotes/upstream/eyesullu-exo_2\u001b[m\n","  \u001b[31mremotes/upstream/main\u001b[m\n","  \u001b[31mremotes/upstream/meirambek-solution\u001b[m\n","  \u001b[31mremotes/upstream/nursultan_11\u001b[m\n","  \u001b[31mremotes/upstream/three_algorhithms_8\u001b[m\n","  \u001b[31mremotes/upstream/yelaman_seiitkhanuly\u001b[m\n"]}]},{"cell_type":"code","source":["%cd /content/Algorithm1_2025\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N1s9ZsnSyK-b","executionInfo":{"status":"ok","timestamp":1760865864049,"user_tz":-300,"elapsed":15,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"1fa77898-3931-4140-fee8-a396cb03ac3b"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/Algorithm1_2025\n"]}]},{"cell_type":"code","source":["!git fetch upstream\n"],"metadata":{"id":"9aplHiuayNmm","executionInfo":{"status":"ok","timestamp":1760865870910,"user_tz":-300,"elapsed":314,"user":{"displayName":"Chen","userId":"08024069487640951724"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["!git checkout -b 25_2/s_14 upstream/25_2/s_14\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6ubgTUaqyPQ9","executionInfo":{"status":"ok","timestamp":1760865877636,"user_tz":-300,"elapsed":121,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"d82d68b8-1559-45c4-93b7-9991438cf182"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: 'upstream/25_2/s_14' is not a commit and a branch '25_2/s_14' cannot be created from it\n"]}]},{"cell_type":"code","source":["!git checkout main\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wZJsQnclyVEv","executionInfo":{"status":"ok","timestamp":1760865901624,"user_tz":-300,"elapsed":82,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"23938169-02fd-4a1d-a0d0-8f137404c072"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Already on 'main'\n","Your branch is up to date with 'origin/main'.\n"]}]},{"cell_type":"code","source":["# ✅ 1. 创建你自己的分支（名字规范化）\n","!git checkout -b 25_2_s_14\n","\n","# ✅ 2. 创建作业目录并复制代码文件\n","!mkdir -p 25_2/s_14\n","!cp /content/sorting_algorithms.py 25_2/s_14/\n","\n","# ✅ 3. 添加并提交\n","!git add 25_2/s_14/\n","!git commit -m \"Add sorting algorithms homework\"\n","\n","# ✅ 4. 推送到你自己的 GitHub 仓库\n","!git push origin 25_2_s_14\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qV7vY89rybgC","executionInfo":{"status":"ok","timestamp":1760865928986,"user_tz":-300,"elapsed":770,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"a0d107ed-7abf-4cef-edfd-452b8b3eb691"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Switched to a new branch '25_2_s_14'\n","cp: cannot stat '/content/sorting_algorithms.py': No such file or directory\n","On branch 25_2_s_14\n","nothing to commit, working tree clean\n","fatal: could not read Username for 'https://github.com': No such device or address\n"]}]},{"cell_type":"code","source":["!ls /content\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jhKKi2ChyiEz","executionInfo":{"status":"ok","timestamp":1760865961103,"user_tz":-300,"elapsed":108,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"43496ad5-5de9-4369-ed22-045cd967d975"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Algorithm1_2025  drive\treport.md  sample_data\n"]}]},{"cell_type":"code","source":["%cd /content/Algorithm1_2025\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ThlydE0myqdT","executionInfo":{"status":"ok","timestamp":1760865990734,"user_tz":-300,"elapsed":7,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"6be03513-d32d-4b43-8c4f-17bede754852"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/Algorithm1_2025\n"]}]},{"cell_type":"code","source":["25_2/s_14/\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"-ab78TXiysso","executionInfo":{"status":"error","timestamp":1760865998137,"user_tz":-300,"elapsed":15,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"b4c8c282-775a-4edd-eea4-7e8b1c55c194"},"execution_count":32,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (ipython-input-1588754789.py, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-1588754789.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    25_2/s_14/\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":["!mkdir -p 25_2/s_14\n"],"metadata":{"id":"8GGnOI2-yyDX","executionInfo":{"status":"ok","timestamp":1760866019916,"user_tz":-300,"elapsed":129,"user":{"displayName":"Chen","userId":"08024069487640951724"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["%cd 25_2/s_14\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cBwt5Smryzus","executionInfo":{"status":"ok","timestamp":1760866026537,"user_tz":-300,"elapsed":23,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"95a5b2dc-2d71-4a71-9f20-37aa007dd820"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/Algorithm1_2025/25_2/s_14\n"]}]},{"cell_type":"code","source":["!cp /content/Algo.py /content/Algorithm1_2025/25_2/s_14/\n","!ls /content/Algorithm1_2025/25_2/s_14/\n"],"metadata":{"id":"UqZjUNESzBCj","executionInfo":{"status":"ok","timestamp":1760866081526,"user_tz":-300,"elapsed":234,"user":{"displayName":"Chen","userId":"08024069487640951724"}},"outputId":"e5bbbf40-23c8-481e-f4cb-391881b5008c","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["cp: cannot stat '/content/Algo.py': No such file or directory\n"]}]},{"cell_type":"code","source":["!find /content -name \"Algo.py\"\n"],"metadata":{"id":"b-8SmdxGzFnW"},"execution_count":null,"outputs":[]}]}